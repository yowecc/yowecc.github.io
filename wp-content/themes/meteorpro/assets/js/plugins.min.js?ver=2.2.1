
async function Cx_FetchApi(config) {
    const { 
        apiname, 
        method = 'GET', // 默认为GET请求
        params = {}, // GET请求参数
        data = {}, // POST请求数据
        maxRetries = 3, 
        retryInterval = 0, 
        nonces = false 
    } = config;
    async function fetchData() {        
        const apiurl = cxjs.jsonapi + apiname;
        const headers = {
            'Content-Type': 'application/json',
        };
        if( nonces ){
            headers['X-WP-Nonce'] = nonces;
        }

        const jwtToken = localStorage.getItem('jwtToken');
        if ( jwtToken ) {
            headers.Authorization = jwtToken;
        }
        
        // 处理GET请求参数
        if (method === 'GET' && Object.keys(params).length > 0) {
            const urlParams = new URLSearchParams(params);
            apiurl += '?' + urlParams.toString();
        }

        let options = {
            method,
            headers,
        };

        // 如果是POST请求，添加请求体
        if (method === 'POST') {
            options.body = JSON.stringify(data);
        }

        const response = await fetch(apiurl, options);

        if (!response.ok) {
            throw new Error(`Fetch failed with status: ${response.status}`);
        }
        return response.json();
    }

    try {
        return await fetchData();
    } catch (error) {
        console.error('Error fetching user data:', error.message);
        return null;
    }
}

// 统一错误处理函数
function handleError(error, requestFunction, retries) {
    console.error('There was an error!', error);
    if ( retries ) {
        console.log(`Retrying... (${retries} retries left)`);
        return requestFunction();
    } else {
        console.error('Max retries reached. Giving up.');
    }
}
axios.interceptors.request.use(config => {
    return config;
}, error => handleError(error, axios.request));

axios.interceptors.response.use(response => {
    return response;
}, error => handleError(error, axios.request));

document.addEventListener('alpine:init', () => {


    // 获取登录状态
    Alpine.data('xhData', () => ({
        darkMode : false,
        userStatus : 'load',
        moibleMenu : false,
        apirest : true,
        wpnonce : 'N/A',
        userData : {},
        startTime : 0,
        endTime : 0,
        elapsedTime : 0,
        apiRetry : null,
        callback : null,
        /**
         * 验证
         */
        validity: {
            username(str){
                if (/^[a-zA-Z0-9_-]{4,16}$/.test(str)) {
                    return 'username';
                }
                if (/^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$/.test(str)) {
                    return 'email';
                }
                if (/^1[3-9]\d{9}$/.test(str)) {
                    return 'phone';
                }
                return 'invalid';
            }
        },

        /**
         * 发送验证码
         */
        sendCode : {
            
            sendPass : false,
            sendBtnText : '',
            movesendBtnText : '',
            sendcodeTime : null,
            // 倒计时结束
            endReckontime() {
                clearInterval(this.sendcodeTime);
                this.movesendBtnText = this.sendBtnText;
                this.sendPass    = true;
                localStorage.removeItem('verifySendTime');
            },
            // 倒计时
            startReckontime(seconds){
                clearInterval(this.sendcodeTime);
                this.sendPass = false;
                this.sendcodeTime = setInterval(() => {
                    if (seconds <= 1) {
                        this.endReckontime();
                    } else {
                        seconds--;
                        if( seconds < 59 ){
                            this.movesendBtnText = seconds +' S';
                        }                    
                    }
                }, 1000);
            },
            // 初始化
            sendInit(showstr){
                this.sendBtnText = showstr;
                const sendTime   = localStorage.getItem('verifySendTime');
                this.sendPass    = false;
                let sendPass     = true;
                if (sendTime) {
                    const elapsedTime = new Date().getTime() - parseInt(sendTime, 10);
                    const countdownDuration = 60000;
                    if (elapsedTime < countdownDuration) {
                        const remainingTime = Math.ceil((countdownDuration - elapsedTime) / 1000);
                        this.startReckontime(remainingTime);
                        sendPass = false;
                    } else {
                        localStorage.removeItem('verifySendTime');
                    }
                }

                if( sendPass ){
                    this.movesendBtnText = this.sendBtnText;
                    this.sendPass    = true;
                }
                return this.movesendBtnText;
            },
            // 发送验证码
            sendVerify(sendCode,apiName,_thisdata,userNone = true){
                const sendCodeVerify = _thisdata.validity.username(sendCode);
                if( !sendCode || sendCodeVerify == 'invalid' || sendCodeVerify == 'username' ){
                    _thisdata.error['usercode'] = true;
                    return;
                }else if( this.sendPass){
                    this.movesendBtnText = '发送中...';
                    const postData = {
                        code : sendCode,
                        type : sendCodeVerify,
                        usernone : userNone
                    };
                    _thisdata.fetchApi(apiName, {
                        _this : _thisdata,
                        calldata : true,
                        method: 'POST',
                        retfill : false,
                        data: postData,
                        callback : (retData, _this) => {
                            localStorage.setItem('verifySendTime', new Date().getTime());
                            this.movesendBtnText = retData.msg;
                            this.startReckontime(60);
                        }
                    });                    
                }else{
                    cxfunc.alert('验证码发送频繁，请稍后再试！');
                }
            }
        },

        // 获取Token
        getToken(){
            if( this.wpnonce == 'N/A' || !this.wpnonce ){
                const _nonces = sessionStorage.getItem('_nonces');
                if( _nonces ){
                    this.wpnonce = _nonces;
                }                
            }
            return this.wpnonce;
        },
        setToken(token){
            sessionStorage.setItem('_nonces', token);
            this.wpnonce = token;
        },
        apisetToken(request){
            if ('nonces' in request ) {
                this.setToken(request.nonces);
            }
        },
        addData( args ){
            for (let key in args) {
                if (args.hasOwnProperty(key)) {
                    this[key] = args[key];
                }
            }
        },

        /**
         * 统一接口请求函数
         */
        fetchApiLoad : 0,
        formloadbtn(btnName,success = ''){
            console.log(this.fetchApiLoad);
            if( !this.fetchApiLoad ){
                return btnName;
            }else if( this.fetchApiLoad == 2 ){
                // 判断success是否为空，为空则返回默认值
                if( success == '' ){
                    success = 'Success';
                }
                return success;
            }
            return `<span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span> Loading...`;
        }, 
        updateApiload( start ){
            this.fetchApiLoad = start;
        },
        async fetchApi(apiname, {
            callback = null,
            _this = this,
            method = 'GET',
            calldata = true,
            retfill = true,
            updateToken = true,
            timeout = 0,
            params = {},
            data = {}
        } = {}, retries = true) {
            const apiurl = cxjs.jsonapi + apiname;
            const startTime = Date.now();

            if( method === 'POST' && updateToken ){
                data.nonces = this.getToken();
            }
            axios.request({
                url: apiurl,
                method: method,
                params: method === 'GET' ? params : {},
                data: method !== 'GET' ? data : {}
            }).then(response => {
                const endTime = Date.now();
                const elapsedTime = endTime - startTime;
                let   delay = timeout > elapsedTime ? timeout - elapsedTime : 0;

                const { data: retData } = response;
                if ('nonces' in retData) {
                    _this.setToken(retData.nonces);
                }                
                if (calldata) { 
                    switch (retData.code) {
                        case 0: case 5:case 7: 
                            if (typeof callback === 'function') {
                                try {
                                    if(retData.code != 0 ){
                                        delay = 0;
                                    }
                                    setTimeout(() => {
                                        callback(retfill ? retData : retData.data, _this);
                                    }, delay);
                                } catch (error) {
                                    console.error('Callback error[145]:', error);
                                }
                            }
                            break;
                        case 3:
                            _this.userLogin( ('gohome' in retData) );
                            break;
                        case 2:
                            // 重试
                            if (retries) {
                                _this.fetchApi(apiname, { callback, _this, method, calldata, updateToken,timeout, retfill, params, data }, false);
                            } else {
                                console.error('Callback error[143]:', retData.msg);
                            }
                            break;
                        default:
                            // 错误提醒
                            const poptype = retData.poptype || 'danger';
                            const reload = retData.reload || false;
                            cxfunc.alert(retData.msg, () => {
                                this.fetchApiLoad = 0;
                                if (reload) {
                                    location.reload();
                                }
                            }, poptype);
                            break;
                    }
                } else {
                    if (typeof callback === 'function') {
                        try {
                            setTimeout(() => {
                                callback(retfill ? retData : retData.data, _this);
                            }, delay);
                        } catch (error) {
                            console.error('Callback error[146]:', error);
                        }
                    }
                }

            }).catch(error => {
                handleError(error, () => _this.fetchApi(apiname, { callback, _this, method, calldata, updateToken,timeout, retfill, params, data }, false), retries);
            });
        },


        /**
         * 公共方法
         */
        xhapiremote(apiName,data,callback = () => {}){
            if( this.fetchApiLoad ) return false;
            this.fetchApiLoad == 1;
            this.popLoading();
            this.fetchApi(apiName, {
                _this : this,
                calldata : true,
                method: 'POST',
                timeout : 500,
                retfill : false,
                data: data,
                callback : (retData, _this) => {
                    this.fetchApiLoad == 2;
                    this._bgclose('btn');
                    if ('alertType' in retData) {
                        let callback = () => {};
                        if( 'href' in retData ){
                            callback = () => {
                                location.href = retData.href;
                            };
                        }else if( 'reload' in retData ){
                            callback = () => {
                                location.reload();
                            };                            
                        }
                        cxfunc.alert(retData.msg,callback,retData.alertType);
                    }else if (typeof callback === 'function') {
                        callback(retData,_this);
                    }
                    return retData;
                }
            });
        },     
        xhapiGet(event,Data,Type,callback = () => {} ){
            this.fetchApi('xhapiget', {
                _this : this,
                calldata : true,
                method: 'POST',
                data: {
                    data : Data,
                    type : Type
                },
                callback : (retData, _this) => {
                    if (typeof callback === 'function') {
                        callback(event,retData);
                    }
                    return retData;
                }
            });
        },
        // 评论小工具
        commentWidget : {
            loadIng : false,
            formData :{},
            async cwidgetPaged( pageType,rootThis ){  
                if( this.loadIng ) return;  
                let apiType = false;            
                if( pageType ){
                    // next
                    if( this.formData.paged < this.formData.maxpage ){
                        this.formData.paged++;
                        apiType = true;
                    }
                }else{
                    // prev
                    if( this.formData.paged > 1 ){
                        this.formData.paged--;
                        apiType = true;
                    }
                }
                if( apiType ){
                    this.loadIng = true;
                    const commentList  = await Cx_FetchApi({
                        apiname : 'commentWidget',
                        method : 'POST',
                        data : this.formData
                    });
                    if( !commentList.code ){
                        rootThis.$refs.commentWidgetList.innerHTML = commentList.data.html;
                        this.loadIng = false;
                    }else{
                        cxfunc.alert(commentList.msg,function(){
                            location.reload();
                        });
                    }
                }
            },
        },
        // 搜索
        searchData : {
            Popup : false,
            Inputtop : true,
            loadIng : false,
            postList : '',
            formData : {
                word : '',
                wpnonce : '',
            },
            searchLoadApi(thisData){
                if( !this.formData.word ){
                    this.postList = '';
                }
                if( this.loadIng || !this.formData.word ) return;
                this.postList = '';
                this.loadIng  = true;
                // 发起请求
                thisData.fetchApi('search', {
                    _this : this,
                    calldata : true,
                    method: 'POST',
                    retfill : false,
                    data: this.formData,
                    callback : (retData, _this) => {
                        _this.Inputtop = false;
                        _this.postList = retData.html + retData.morehtml;
                        _this.loadIng  = false;
                    }
                });
            },
            searchFormSubmit(thisData){
                this.searchLoadApi(thisData);
            },
            searchbtnClick(){
                this.Popup = !this.Popup;
                this.Inputtop = true;
                this.formData.word = '';
                this.postList = '';
            },
        },
        
        // 弹窗
        popData : {
            Emon : false,
            bgShow : false,
            title : '信息',
            content : '',
            bgBlack : false,
            bgClose : true,
            popMwidth : '',
            callback : null,
            loadclass : false,
            hrefHome :false,
            mbemon : cxjs.popMbemon, // 移动端靠下显示
            // 弹窗表单
            formloading : false,
            formcallback : null,
            startThis : null,
        },
        popForm(Data) {
            if (this.popData.formloading) return;
            this.popData.formloading = true;
            if (typeof this.popData.formcallback === 'function') {
                this.popData.formloading = false;
                this.popData.formcallback(Data, this.popData.startThis);
            }
        },
        _bgclose(Type) {
            if ( (Type == 'bg' && this.popData.bgClose) || Type == 'btn' ) {
                this.popData.bgShow = this.moibleMenu = this.popData.bgBlack = this.popData.Emon = this.popData.loadclass = false;
                if (typeof this.popData.callback === 'function') {
                    this.popData.callback(this.popData.startThis);
                }
                this.popData.callback = null;
                if (this.popData.hrefHome) {
                    location.href = cxjs.homeurl;
                }
                setTimeout(() => {
                    this.popData.popMwidth = '';
                }, 100);
            }
        },
        popInit({
            title   = '',
            content = '',
            bgBlack = true,
            mWidth  = '350px',
            formcallback = null,
            startThis = null,
            mbemon   = null,
        } = {}){
            if( mbemon != null ){
                this.popData.mbemon = mbemon;
            }
            this.popData.loadclass = false;
            this.popData.formloading = false;            
            this.popData.title     = title;
            this.popData.content   = content;
            this.popData.bgBlack   = bgBlack;            
            this.popData.popMwidth = mWidth;
            this.popData.bgShow    = this.popData.Emon = true;
            this.popData.formcallback = formcallback;
            this.popData.startThis = startThis;
        },
        popLoading(){
            this.popData.mbemon = false;
            this.popData.title   = '';
            this.popData.content = `
            <div class="p-3 text-center pb-0">
                <div class="spinner-border spinner-b1" role="status"></div>
                <p class="fs-7 mt-2 opacity-75">Loading...</p>
            </div>`;
            this.popData.bgShow    = this.popData.bgBlack = true;
            this.popData.popMwidth = '50px';
            this.popData.Emon      = this.popData.loadclass = true;
            this.popData.bgClose   = false;
        },
        
        /**
         * 图片弹窗
         */
        popImage(title,imgUrl,desc){
            const content = `<div class="popimgbox">
            <img src="${imgUrl}" alt="${title}">
            <p class="fs-6 mt-3 opacity-75 text-center">${desc}</p>
            </div>`;
            this.popInit({
                title : title,
                content : content,
                mWidth  : '200px'
            });
        },
        /**
         * 评论相关
         */
        commentSetddata(){
            const commentUserData = localStorage.getItem('commentUserData');
            if( commentUserData ){
                const commentUserjson = JSON.parse(commentUserData);
                this.commentUserdata.name  = commentUserjson.name;
                this.commentUserdata.email = commentUserjson.email;
                this.commentUserdata.url   = commentUserjson.url;
            }
        },
        commentClearuser(){
            localStorage.removeItem('commentUserData');
            location.reload();
        },
        /**
         * 用户登录
         */
        userLogin( gohome = false ){
            this.popData.hrefHome = gohome;
            this.$refs.userloginbtn.click();
        },
        getuser( callback = null ){
            this.fetchApi('userdata', {
                _this : this,
                calldata : true,
                callback : (userData,_this) => {
                    if ( userData.userStatus == 'nologin' ) {
                        _this.userStatus = 'nologin';
                    }else{                        
                        localStorage.setItem('userData', JSON.stringify(userData.data));  
                        _this.userData   = userData.data;  
                        _this.userStatus = 'login';                    
                    }
                    Cookies.set('userStatus', userData.userStatus,{ expires: 6/24 });
                    _this.setToken(userData.wpnonce);
                    if (typeof callback === 'function') {
                        try {
                            callback(userData);
                        } catch (error) {
                            console.error('Callback error:', error);
                        }
                    }
                }
            });
        },

        requestCallback(request){
            if( request.wpnonce ){
                this.setToken(request.wpnonce);
            }
            if( request.code == 1 ){
                cxfunc.alert(request.msg,function(){
                    location.reload();
                });
                return null;
            }else if( request.code == 2 ){
                if( this.apirest && this.apiRetry ){
                    this.apirest = false;
                    return this.apiRetry();
                }
                cxfunc.alert(request.msg);
                return null;             
            }else if( request.code == 3 ){
                // 未登录，处理登录逻辑
            }else{
                if (typeof this.callback === 'function') {
                    this.callback(request.data);
                    this.callback = null;
                }
            }
        },
        init() {
            const darkMode = localStorage.getItem('darkMode');
            this.darkMode = darkMode === "true";
            // 获取用户信息
            const userStatus = Cookies.get('userStatus');                
            if( userStatus == 'nologin' ){
                this.userStatus = userStatus;
            }else{
                const userData   = localStorage.getItem('userData');
                if( userData ){                    
                    this.userData = JSON.parse(userData);
                    this.userStatus = 'login';
                    setTimeout(() => {this.getuser()}, 1000);
                }else{
                    this.userStatus = 'load';
                    this.getuser();
                }                   
            }
        },
        
        parameterArgs( argsData ){
            for (let key in argsData ) {
                if (argsData.hasOwnProperty(key)) {
                    if (typeof argsData[key] === 'object' && argsData[key] !== null && !Array.isArray(argsData[key])) {
                        for (let subkey in argsData[key] ) {
                            if (argsData[key].hasOwnProperty(subkey)) {
                                this[key][subkey] = argsData[key][subkey];
                            }
                        }
                    } else {
                        this[key][subkey] = argsData[key];
                    }
                }
            }
        },
    }));

    // 获取文章信息
    Alpine.data('Xh_Postmeta', () => ({
        postMeta : {},
        getpost(){
            this.fetchApi('post/'+cxjs.postId, {
                _this : this,
                calldata : false,
                callback : (retData,_this) => {
                    _this.postMeta = retData;
                }
            });            
        },
        init() {            
            this.getpost();                    
        },
        _setCollect(){
            this.postMeta.postCollect_on = !this.postMeta.postCollect_on;
            this.fetchApi('postmeta', {
                _this : this,
                method : 'POST',
                data : {
                    wpnonce : this.getToken(),
                    metakey : 'collect',
                    postId : cxjs.postId
                },
                callback : (retData,_this) => {
                    return retData;
                }
            });  
        },
        async _setlike(){
            if( this.postMeta.postLike_on ) return;
            this.postMeta.postLike    = this.postMeta.postLike + 1;
            this.postMeta.postLike_on = true;
            this.fetchApi('postmeta', {
                _this : this,
                method : 'POST',
                data : {
                    wpnonce : this.getToken(),
                    metakey : 'like',
                    postId : cxjs.postId
                },
                callback : (retData,_this) => {
                    _this.postMeta.postLike = retData.count;
                }
            });       
        }
    }));

    Alpine.data('postComment', () => ({
        emojibox : false,
        emojis :[
            "😄", "😊", "😃", "😉", "😍", "😘", "😚", "😳", "😁", "😌", "😜", "😝", "😒", "😏", "😓", "😔", "😖", "😥", "😰", "😨", "😣", "😢", "😭", "😂", "😱", "😠", "😪", "😷", "😇", "😋", "😧", "😦", "😯", "😵", "😛", "😶", "😎", "😅", "😟", "👍", "👎", "👏", "✌", "🙏", "✊", "❤", "💔", "💓", "💖"
        ],
        commentLoad : false,
        commentAuthority : false,
        commentForm : true,
        commentAvatar : cxjs.themedir+'/assets/images/avatar.png',
        commentName : 'N/A',
        commentlaceholder : '',
        commentdepthlaceholder : '',
        callback : null,
        commentListload : false,
        commentTypeload : false,
        commentListpage : 0,
        commentlistType : 'date',
        form : {
            comment_post_ID : 0,
            comment_parent : 0,
            comment : '',    
            submitbtn : '',
            wpnonce : '',
            author : '',
            email : '',
            url : ''      
        },
        emojishow(){
            let emojihtml = '';
            this.emojis.forEach(emoji => {
                // 为每个对象生成一段HTML
                emojihtml += `<span class="emoji-button" @click="addEmoji('${emoji}')">${emoji}</span> `;
            });
            this.$refs.emojibody.innerHTML = emojihtml;
            this.emojibox = !this.emojibox;
        },
        init(){
            // 请求评论列表
            this.commentListdata( {
                postId : cxjs.postId,
                page : 1,
                orderby : this.commentlistType,
                wpnonce : this.getToken()
            } );         
        },
        commentClickAvatar(){
            if( this.userStatus == 'nologin' ){
                this.$refs.editEmailInformations.click();
            }
        },
        editEmailInformation(poptitle){
            this.popInit({
                title  : poptitle,
                content : this.$refs.commentuserform.innerHTML,
                mWidth:'500px',
                startThis : this,
                formcallback : async function(Data,startThis){
                    const request = await Cx_FetchApi({
                        apiname: 'comments/getavatar',
                        method: 'POST',
                        data: {
                            email: Data.email,
                            wpnonce: startThis.getToken()
                        }
                    });
                    
                    let commentdata = {
                        'name' : Data.name,
                        'email' : Data.email,
                        'url' : Data.url,
                        'avatar' : ''
                    };
                    if( request && request.data.avatar){                        
                        commentdata.avatar = request.data.avatar;
                    }
                    startThis.form.author = commentdata.name;
                    startThis.form.email = commentdata.email;
                    startThis.form.url = commentdata.url;
                    startThis.commentAvatar = commentdata.avatar;
                    startThis.commentAuthority = false;
                    if( Data.cookies ){ 
                        // 缓存数据
                        localStorage.setItem('commentUserData', JSON.stringify(commentdata));
                    }
                    startThis.popData.formloading = false;
                    startThis._bgclose('bg');                    
                }
            }); 
            //console.log(poptitle,this.$refs.commentuserform);
            
        },
        setloginComment(type){
            this.commentAuthority = false;
            if( this.userStatus == 'nologin' ){
                if( type == 'login' ){
                    this.commentAuthority = true;
                }else{
                    if( !this.form.email ){
                        const commentUserData = localStorage.getItem('commentUserData');
                        if( commentUserData ){
                            const commentUserjson = JSON.parse(commentUserData);
                            this.form.email    = commentUserjson.email;
                            this.form.author   = commentUserjson.name;
                            this.form.url      = commentUserjson.url;
                            this.commentAvatar = commentUserjson.avatar;
                        }else{
                            this.commentAuthority = true;
                        }                        
                    }                    
                }
            }else if( this.userStatus != 'load' ){
                const startThis = this;
                setTimeout(function() {
                    startThis.setloginComment(type);
                }, 1000);
            }else{
                this.commentAvatar = this.userData.avatar;
            }
        },
        commentFormrest(){
            this.commentLoad  = false;
            this.form.comment = '';
            this.commentForm = false;
            this.form.comment_parent = 0;
            this.commentlaceholder = this.commentdepthlaceholder;
            let respondHtml = this.$refs.respond.outerHTML;
            this.$refs.respond.remove();
            let commentsBox = document.getElementById("comments");
            commentsBox.insertAdjacentHTML('afterbegin', respondHtml);
            this.commentForm = true; 
            const footers = document.querySelectorAll('.comment-footer-meta');
            footers.forEach(footer => {
                footer.style.opacity = 1;
            });
            //console.log(document.getElementById("comments"));
            //this.$el.closest('#comments').insertAdjacentHTML('beforeend', respondHtml);
        },
        commentReply(data){
            const commentBodyElement = this.$el.closest('footer');
            if (commentBodyElement) {
                const footers = document.querySelectorAll('.comment-footer-meta');
                footers.forEach(footer => {
                    footer.style.opacity = 1;
                });
                commentBodyElement.style.opacity = 0;               
                this.commentForm = false;
                setTimeout(() => {
                    this.form.comment_parent = data.commentid;
                    let respondHtml = this.$refs.respond.outerHTML;  
                    this.$refs.respond.remove();   
                    commentBodyElement.insertAdjacentHTML('afterend', respondHtml); 
                    this.commentlaceholder = data.replyto;  
                    this.commentForm = true; 
                }, 200);
            }
        },
        hascommentType(Type){
            if( this.commentlistType == Type || this.commentTypeload ) return;
            this.commentTypeload = true;
            this.commentlistType = Type;
            this.commentListdata( {
                postId : cxjs.postId,
                page : 1,
                orderby : this.commentlistType,
                wpnonce : this.getToken()
            } );
        },
        async commentEndorse(event,commentId){
            let clickEl = event.target.closest('div');
            const endorseDataString = sessionStorage.getItem('commentEndorse');
            if (endorseDataString) {
                const endorseData = JSON.parse(endorseDataString);
                if (endorseData.includes(commentId)) {
                    cxfunc.alert(cxjs.endorseMsg);
                    return;
                }
            }
            if (clickEl.classList.contains('text-auto')) return false;
            let spanElement = clickEl.closest('div').querySelector('span');
            clickEl.classList.add('text-auto');
            if (spanElement) {
                let currentValue = parseInt(spanElement.textContent, 10);
                if (!isNaN(currentValue)) {
                    currentValue++;
                    spanElement.textContent = currentValue;

                    const request = await Cx_FetchApi({
                        apiname: 'comments/endorse',
                        method: 'POST',
                        data: {
                            commentId: commentId,
                            wpnonce: this.getToken()
                        }
                    });

                    if (request) {
                        if (request.code == 1) {
                            currentValue--;
                            spanElement.textContent = currentValue;
                            clickEl.classList.remove('text-auto');
                            cxfunc.alert(request.msg);
                        } else {
                            let endorseList = endorseDataString ? JSON.parse(endorseDataString) : [];
                            endorseList.unshift(commentId);
                            sessionStorage.setItem('commentEndorse', JSON.stringify(endorseList));
                        }
                    }
                }
            }
        },
        commentMore(){
            // 加载更多评论
            if(this.commentListload) return;
            this.commentListload = true;
            this.commentListdata( {
                postId : cxjs.postId,
                page : this.commentListpage,
                orderby : this.commentlistType,
                wpnonce : this.getToken()
            } );
        },
        
        async commentListdata( apidata ){
            const request = await Cx_FetchApi({
                apiname : 'comments/list',
                method : 'POST',
                data : apidata
            });
            this.callback = function(requestData){
                this.commentListload = this.commentTypeload = false;
                //console.log(requestData,requestData.page);
                if( requestData.type == 'more'){
                    this.commentListpage = requestData.page;
                }else{
                    this.commentListpage = 0;
                }        
                if( requestData.page <= 2 ){
                    this.$refs.commentList.innerHTML = requestData.html;
                }else{
                    this.$refs.commentList.insertAdjacentHTML('beforeend', requestData.html);
                }
                this.$nextTick(() => {
                    cxfunc.ajaxLoad();
                });
            }
            this.apiRetry = function(){
                apidata.wpnonce = this.getToken();
                this.commentListdata(apidata);
            }
            this.requestCallback(request);
        },
        addEmoji(emoji){
            this.form.comment = this.form.comment + emoji;
        },
        async submitCommentform() {
            if( this.commentLoad || !this.form.comment ) return;
            this.commentLoad = true;
            this.form.wpnonce = this.getToken();
            this.startTime = new Date().getTime();
            const comment = await Cx_FetchApi({
                apiname : 'comments/add',
                method : 'POST',
                data : this.form
            });
            this.endTime = new Date().getTime();
            this.elapsedTime = 1000 - (this.endTime - this.startTime);
            if( this.elapsedTime < 0 && this.elapsedTime > 1000 ){
                this.elapsedTime = 0;
            }
            if( comment ){
                this.callback = function(requestData){
                    setTimeout(() => {
                        if( this.form.comment_parent == 0 ){
                            const hasNoneComment = this.$refs.commentList.querySelector('.commentlist-none');
                            if( hasNoneComment ){
                                hasNoneComment.remove();
                            }
                            this.$refs.commentList.insertAdjacentHTML('afterbegin', requestData.html); 
                        }else{
                            let commentItem = document.getElementById("comment-"+this.form.comment_parent);
                            let commentUl = commentItem.querySelector('ul');
                            if (commentUl) {
                                commentUl.insertAdjacentHTML('afterbegin', requestData.html);
                            } else {
                                let newUl = document.createElement('ul');
                                newUl.className = 'children';
                                newUl.innerHTML = requestData.html;
                                commentItem.appendChild(newUl);
                            }
                            //console.log(commentItem);
                        }
                        this.$nextTick(() => {
                            cxfunc.ajaxLoad();
                        });                        
                        this.commentFormrest();
                    }, this.elapsedTime);                     
                }
                this.requestCallback(comment);
            }
            //console.log(this.form);
        },
    }));

    Alpine.data('xgPostdata', () => ({
        xgpostType : 'hot',
        newapibody : false,
        xgloadApi(apidata) {
            this.indexHyhloadtype   = true;
            this.fetchApi('post/related', {
                _this : this,
                method : 'POST',
                retfill : false,
                data : apidata,
                callback : (retData,_this) => {
                    if( retData.type == 'new' ){
                        _this.$refs.xgpostNew.innerHTML = retData.html;
                    }
                    if( retData.type == 'hot' ){
                        _this.$refs.xgpostHot.innerHTML = retData.html;
                    }
                    _this.$nextTick(() => {
                        cxfunc.ajaxLoad();
                    });
                }
            });
        },
        xgPostrand( type ){
            if( this.xgpostType == type ) return;
            this.xgpostType = type;
            if( type == 'new' && !this.newapibody ){
                let apidata = {
                    'number' : 5,
                    'postId' : cxjs.postId,
                    'paged'  : 1,
                    'type'   : 'new'
                };
                this.newapibody = true;
                this.xgloadApi(apidata);
            }
            if( type == 'hot' && this.newapibody){
                this.newapibody = false;
            }
        }
    }));

    Alpine.data('indexHyhData', () => ({
        indexHyhloadtype : false,
        indexHyhContent: '',
        hyhloadApi() {
            this.indexHyhloadtype   = true;
            this.fetchApi('post/rand', {
                _this : this,
                calldata : true,
                method : 'POST',
                retfill : false,
                data : {
                    'number' : 4
                },
                callback : (retData,_this) => {
                    _this.indexHyhContent = retData;
                    _this.indexHyhloadtype = false;
                    _this.$nextTick(() => {
                        cxfunc.ajaxLoad();
                    });               
                    sessionStorage.setItem('indexhyhPost', _this.indexHyhContent);
                }
            });
        },
        indexHyhload(){
            this.hyhloadApi();
        },
        init(){
            const _hyhPost = sessionStorage.getItem('indexhyhPost');
            if( _hyhPost ){
                this.indexHyhContent = _hyhPost;
            }else{
                const apitempl = `
                <div class="apl apl-sm infeed-hr">
                    <div class="thumb"><div class="thumb-inner rounded-3 overflow-hidden atb"></div></div>
                    <div class="details" style="min-height:64px">
                        <h6 class="post-title placeholder-glow opacity-25">
                            <span class="placeholder col-4 mt-1" style="height: 1.3em"></span>
                            <span class="placeholder col-4 mt-1" style="height: 1.3em"></span>
                            <span class="placeholder col-6 mt-3" style="height: 1.2em;background:#744a4e"></span>
                        </h6>
                    </div>
                </div>`;
                let combinedTemplate = '';
                for (let i = 0; i < 4; i++) {
                    combinedTemplate += apitempl;
                }
                this.indexHyhContent = combinedTemplate;
                this.hyhloadApi();
            }            
        }
    }));


    // 分享功能
    Alpine.bind('weiboLink', () => ({
        ':href'() {
            return 'javascript:;';
        },
        '@click'() {
            window.open('//service.weibo.com/share/share.php?url='+this.postLink+'&title='+this.postTitle+'&pic='+this.postThumb, '_blank');
        }
    }));
    Alpine.bind('qqLink', () => ({
        ':href'() {
            return 'javascript:;';
        },
        '@click'() {
            window.open('//connect.qq.com/widget/shareqq/index.html?url='+this.postLink+'&title='+this.postTitle+'&summary='+this.postTitle+'&pics='+this.postThumb, '_blank');
        }
    }));
    Alpine.bind('weixinLink', () => ({
        ':href'() {
            return 'javascript:;';
        },
        '@click'() {
            if (typeof WeixinJSBridge == "undefined") {
                // 微信二维码
                const wxcode = QRCode({
                    msg : this.postLink
                    ,dim :   128
                    ,pad :   3          
                });
                const wxcontent = `
                <span class="border border-2 rounded svgbox d-block mx-auto mt-4 mb-3" style="width: 120px;--bs-border-color: #198754;">
                    ${wxcode.outerHTML}
                </span>
                <p class="text-center mt-3 fs-6 opacity-75">使用微信扫描二维码分享！</p>`;
                this.popInit({
                    title  : '微信分享',
                    content : wxcontent,
                    mWidth:'240px'
                });
            } else {
                WeixinJSBridge.invoke('shareTimeline', {
                    "img_url": this.postThumb,
                    "link": this.postLink,
                    "title": this.postTitle
                });
            }
        },
    }));
    
});