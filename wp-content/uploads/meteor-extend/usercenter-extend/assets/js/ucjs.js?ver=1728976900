
document.addEventListener('alpine:init', () => {
    // 用户中心页面
    Alpine.data('XH_userPage', () => ({
        restApi : true,
        pageType : '',
        ploadIng : true,
        ploadIngHeight: 0,
        restApi  : true,
        pageData : {},
        optLoad  : false,
        optId    : 0,
        format:{
            orderId(item){
                let newhtml = item.orderId;
                if( item.payType ){
                    switch ( item.payType ) {
                        case 'alipay':
                            newhtml += ` <i class="cxicon cxicon-zhifubao text-primary ms-1" style="--scale:1"></i>`;  
                        break;case 'wxpay':
                            newhtml += ` <i class="cxicon cxicon-wxpay text-success ms-1" style="--scale:1"></i>`;  
                        break;case 'card':
                            newhtml += ` <i class="cxicon cxicon-webcz text-danger ms-1" style="--scale:1"></i>`;  
                        break;
                    }
                }
                return newhtml;
            },
            formatDate(datetime){
                if (datetime === '永久') {
                    return '永久有效';
                }
                const datePart = datetime.split(' ')[0];
                return `${datePart} 到期`;
            },
            orderIcon(item){
                let orderIcon = '';
                switch ( item.productType ) {
                    case 'member':
                        orderIcon = ` <i class="cxicon cxicon-zhuanshi me-0"></i>`;  
                    break;case 'store':
                        orderIcon = ` <i class="cxicon cxicon-buyshop me-0"></i>`;   
                    break;default:
                        orderIcon = ` <i class="cxicon cxicon-tag me-0"></i>`;
                    break;
                }
                return orderIcon;
            },
            dateTime(item){
                let dateTimeStr = item.orderSuccesstime;
                if( item.orderSuccesstime == '0000-00-00 00:00:00' ){
                    dateTimeStr = item.orderTime;
                }
                return dateTimeStr.split(':').slice(0, 2).join(':');
            }
        },

        /**
         * 取消收藏
         */
        async removeCollect(postId,index) {
            if(this.optLoad) return false;
            this.optId = postId;
            this.optLoad = true;
            this.fetchApi('postmeta', {
                _this : this,
                method: 'POST',
                data : {
                    wpnonce : this.getToken(),
                    metakey : 'collect',
                    postId : postId
                },
                callback : (retData, _this) => {
                    setTimeout(() => {
                        _this.pageData.lists.splice(index, 1);
                        _this.optId = 0;
                        _this.optLoad = false;
                    }, 500);
                }
            });
        },
        /**
         * 更新用户中心资料
         */
        uptypename : '',
        upformload : false,
        upapimsg : '',
        async profileSubmit(type,formData,callback = null) {
            if( this.upformload ) return false;
            this.uptypename = type;
            this.upapimsg   = '';
            this.upformload = true;
            this.fetchApi('setuserdata', {
                _this : this,
                method: 'POST',
                timeout: 800,
                data: {
                    formType: type,
                    formData : formData
                },
                callback : (retData, _this) => {
                    _this.uptypename = '';
                    _this.upformload = false;
                    switch (retData.code) {
                        case 0:
                            _this.upapimsg = retData.msg;
                            _this.uptypename = type;
                            _this.getuser();  
                            setTimeout(() => {
                                _this.uptypename = '';
                                _this.upapimsg   = '';
                            }, 2000);
                            if (typeof callback === 'function') {                            
                                callback(retData, _this);
                            }
                        break;case 5:
                            const formdata = JSON.stringify(retData.data);
                            const content = `
                                <p class="fs-7">${retData.msg}</p>
                                <div x-data='{"formData": ${formdata}}'>
                                <form @submit.prevent="popForm(formData)">
                                    <div class="form-group mt-3 mb-2 d-flex gap-4">
                                        <div class="inputbox">
                                            <input type="text" class="form-control fs-7 py-2" x-model="formData.emailcode" autocomplete="off" placeholder="邮箱验证码">
                                        </div>
                                        <div class="submitbox" style="width:30%">
                                            <button type="submit" class="btn btn-default w-100 fs-7 py-2" x-text="popData.formloading ? 'Loading...' : '提交验证'">提交验证</button>
                                        </div>
                                    </div>
                                </form>
                                </div>`;
                            this.popInit({
                                title : '邮箱验证',
                                content : content,
                                bgBlack : true,
                                mWidth  : '350px',
                                startThis : _this,
                                formcallback: async function(Data, startThis){
                                    startThis.profileSubmit(type,Data,callback);
                                    startThis._bgclose('btn');
                                }                            
                            });
                        break;
                    }
                }
            });            
        },

        /**
         * 生成页码
         */
        pageNav  : {},
        formData : {},
        dataTotalhtml : '',
        paged : 1,
        moreloading : false,
        moreend : false,
        ucPagination(totalPages, currentPage, visiblePages) {
            const pages = [];
            let startPage, endPage;
        
            if (totalPages <= visiblePages) {
                startPage = 1;
                endPage = totalPages;
            } else {
                const halfVisiblePages = Math.floor(visiblePages / 2);
                if (currentPage <= halfVisiblePages + 1) {
                    startPage = 1;
                    endPage = visiblePages;
                } else if (currentPage >= totalPages - halfVisiblePages) {
                    startPage = totalPages - visiblePages + 1;
                    endPage = totalPages;
                } else {
                    startPage = currentPage - halfVisiblePages;
                    endPage = currentPage + halfVisiblePages;
                }
            }
            for (let i = startPage; i <= endPage; i++) {
                pages.push(i);
            }
            const hasPrev = currentPage > 1;
            const hasNext = currentPage < totalPages;
            return {
                pages,
                hasPrev,
                hasNext
            };
        },
        returnPaged(){
            if( !this.pageNav || this.pageNav.pages.length < 2 ) return '';
            let _pagenavHthml = `<nav aria-label="Page navigation adminNavpage">`;
                _pagenavHthml += `<ul class="pagination uc-pagination d-flex justify-content-end list-unstyled gap-2 mb-0">`; 
                _pagenavHthml += `<li class="page-item"><button type="button" class="btn btn-xsm  border-0 btn-nostyle" @click="userPage(pageType,true,paged - 1)" :class="{'disabled':!pageNav.hasPrev}"><i class="cxicon cxicon-chevron-left"></i></button></li>`;
                this.pageNav.pages.forEach(page => {
                    _pagenavHthml += `<li class="page-item"><button type="button" class="btn btn-xsm  border-0 btn-nostyle" :class="{'btn-default current':paged==${page}}" @click="userPage(pageType,true,${page})">${page}</button></li>`;
                }); 
                _pagenavHthml += `<li class="page-item"><button type="button" class="btn btn-xsm  border-0 btn-nostyle" @click="userPage(pageType,true,pageNav.pages.length)" :class="{'disabled':!pageNav.hasNext}"><i class="cxicon cxicon-chevron-right"></i></button></li>`;
                _pagenavHthml += `</ul>`;
                _pagenavHthml += `</nav>`;
            return _pagenavHthml;
        },
        loadMore(pageType = '',paged = 2){
            this.userPage(pageType,true,paged,'loadmore'); 
        },

        /**
         * 用户中心
         */
        async userPage(pageType = '',form = true,paged = 1,loadType = 'load') {
            if( loadType == 'load' ){
                this.ploadIng = true;
            }else if( loadType == 'loadmore' ){
                this.moreloading = true;
            }            
            if( !form ) this.formData = {};
            this.paged = paged;
            // API 请求
            this.fetchApi('userpage', {
                _this : this,
                method: 'POST',
                timeout: 500,
                data: {
                    pageType: pageType,
                    formData : this.formData,
                    paged : paged
                },
                callback : (retData, _this) => {
                    if( loadType == 'load' ){
                        _this.pageData = retData.data;
                        _this.pageType = this.pageData.pageType;
                        _this.ploadIng = false;
                        _this.moreend = false;
                    }else if( loadType == 'loadmore' ){                    
                        _this.pageData.lists = _this.pageData.lists.concat(retData.data.lists); 
                        _this.moreloading = false; 
                        _this.moreend = false;                                
                    }
                    if ( ! ('lists' in this.pageData) ) {
                        this.pageData.lists = [];
                    }
                    // 判断是否有分页
                    if ( 'paged' in this.pageData ) {
                        _this.pageNav  = this.ucPagination(_this.pageData.maxpage, _this.paged, 5);
                        _this.dataTotalhtml = `<span class="fs-6">共<em class="fst-normal px-1 fw-semibold" x-text="pageData.maxpage"></em>页<em class="fst-normal px-1 fw-semibold" x-text="pageData.count"></em>条数据<span>`;
                    } 
                    
                    // 判断是否有更多数据
                    if ( _this.pageData.maxpage <= _this.paged ) {
                        _this.moreend = true;
                    }
    
                    // 组织Url
                    const fullUrl = window.location.href;
                    const hashIndex = fullUrl.indexOf('#');
                    let newUrl = hashIndex !== -1 ? fullUrl.substring(0, hashIndex) : fullUrl;
                    if (_this.pageType) {
                        newUrl += '#' + pageType;
                    }
    
                    window.history.pushState({ page: 'newPage' }, '', newUrl);
                    _this.$nextTick(() => { 
                        cxfunc.ajaxLoad();
                        setTimeout(() => {
                            // 获取ref为uccontent的高度
                            const uccontent = _this.$refs.uccontent;
                            if( uccontent ){
                                _this.ploadIngHeight = uccontent.offsetHeight;
                            }
                        }, 2000);
                    });
                }

            });
        },

        init() {
            if( this.userStatus == 'nologin' ){
                this.userLogin(true);
            }else{
                const hashValue = window.location.hash;
                if (hashValue) {
                    this.pageType = hashValue.slice(1);
                }
                this.userPage(this.pageType);
            }
            // 监听 hashchange 事件
            window.addEventListener('hashchange', () => {
                const newHashValue = window.location.hash;
                if (newHashValue) {
                    this.pageType = newHashValue.slice(1);
                } else {
                    this.pageType = '';
                }
                this.userPage(this.pageType);
            });
            
        },

    }));

    // 用户中心页面
    Alpine.data('ucheadBtn', () => ({
        ucbtn : [],
        getucbtn(){
            this.fetchApi('ucheadbtn', {
                _this : this,
                retfill : false,
                method: 'POST',
                callback : (retData, _this) => {
                    _this.ucbtn = retData;
                    localStorage.setItem('ucheadBtn', JSON.stringify(retData));  
                }
            });
        },
        init(){
            const ucheadBtn = localStorage.getItem('ucheadBtn');
            if( ucheadBtn ){
                this.ucbtn = JSON.parse(ucheadBtn);
                setTimeout(() => {this.getucbtn()}, 2000);
            }else{
                this.getucbtn();
            }             
        }
    }));

    /**
     * 头像上传
     */
    Alpine.data('avatarUploader', () => ({
        imageUrl: '',
        imageupUrl : '',
        croppedImageUrl: '',
        croppie: null,
        saveimgType : 'png',
        saveType:'avatar',
        croppieopt:true,
        viewport: { width: 150, height: 150 },
        boundary: { width: 300, height: 300 },
        avatarpopdesc:'',
        avatarbtn:'',
        avatarpoptit:'',
        initUploader( args ){
            for (let key in args) {
                if (args.hasOwnProperty(key)) {
                    this[key] = args[key];
                }
            }
        },
        handleFileChange(event) {
            const file = event.target.files[0];
            if (file) {
                this.imageUrl = URL.createObjectURL(file);
                console.log(this.imageName);
                this.$nextTick(() => {
                    if( this.croppieopt){
                        this.initCroppie();
                    }else{
                        this.confirmImage();
                    }                    
                });
            }
        },
        confirmImage(){
            const content = `                
                <div id="croppie-container">
                    <img id="crop-image" src="${this.imageUrl}" alt="Picture" width="100%" height="auto">
                </div>
                <div class="d-flex justify-content-center my-3">
                    <button type="button" class="btn btn-default w-75 fs-7 py-2 anim" @click="popForm()">${this.avatarbtn}</button>
                </div>
                <p>请确认上次图片，点击「开始上传」按钮进行上传操作！</p>
                `;
            this.popInit({
                title : this.avatarpoptit,
                content : content,
                bgBlack : true,
                mWidth  : '350px',
                startThis : this,
                formcallback: async function(Data, startThis){
                    startThis.popLoading();
                    startThis.cropImage();
                }                            
            });
        },
        initCroppie() {
            const content = `                
                <div id="croppie-container"></div>
                <div class="d-flex justify-content-center my-3">
                    <button type="button" class="btn btn-default w-75 fs-7 py-2 anim" @click="popForm()">${this.avatarbtn}</button>
                </div>
                <p class="fs-6 opacity-50 text-center mb-0 mt-3">${this.avatarpopdesc}</p>
                `;
            this.popInit({
                title : this.avatarpoptit,
                content : content,
                bgBlack : true,
                mWidth  : '350px',
                startThis : this,
                formcallback: async function(Data, startThis){
                    startThis.popLoading();
                    startThis.cropImage();
                }                            
            });
            setTimeout(() => {
                const croppieContainer = document.getElementById('croppie-container');
                this.croppie = new Croppie(croppieContainer, {
                    viewport: this.viewport,
                    boundary: this.boundary,
                    showZoomer: true,
                    enableResize: true,
                    enableOrientation: true,
                });
                this.croppie.bind({
                    url: this.imageUrl,
                });
            }, 100);           
        },
        cropImage() {
            if (this.croppie) {
                this.croppie.result({
                    type: 'blob',
                    size: 'viewport',
                    format: this.saveimgType,
                }).then((blob) => {
                    this.updateImages(blob);
                });
            }
        },
        async updateImages(blob){
            const formData = new FormData();
            formData.append('image', blob, 'image.'+this.saveimgType);
            formData.append('nonces', this.getToken());
            formData.append('saveType', this.saveType);
            formData.append('saveimgType', this.saveimgType);
            const formTimeout = '574050';
            fetch(cxjs.jsonapi+'imageupload', {
                method: 'POST',
                body: formData,
            })
            .then(response => response.json())
            .then(data => {                
                if (data.code == 0 ) {      
                    const _this = this; 
                    this.imageupUrl = data.data.image_url; 
                    if( this.saveType == 'avatar' ){
                        this.getuser(function(userData){
                            _this._bgclose('btn');
                            location.reload();
                        }); 
                    }else{
                        // 其他操作
                        
                    }                                                        
                }else{
                    this._bgclose('btn');
                    cxfunc.alert(data.msg);
                }                
                
            })
            .catch(error => {
                this._bgclose('btn');
                cxfunc.alert('Upload failed！');
                console.error('error:', error);                
            });
        }
    }));
});